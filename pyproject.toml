[build-system]
requires = ["hatchling"]
build-backend = "hatchling.build"

[project]
name = "openmeteo_requests"
version = "0.1.0"
authors = [{ name = "Patrick Zippenfenig", email = "info@open-meteo.com" }]
description = "Open-Meteo Python Library"
readme = "README.md"
requires-python = ">=3.9"
classifiers = [
    "Development Status :: 3 - Alpha",
    "Intended Audience :: Developers",
    "License :: OSI Approved :: MIT License",
    "Programming Language :: Python :: 3 :: Only",
    "Programming Language :: Python :: 3.9",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Programming Language :: Python :: 3.13",
    "Programming Language :: Python :: 3.14",
]
keywords = ["python", "open", "meteo", "weather", "client"]
dependencies = [
    "niquests>=3.14.1",
    "openmeteo-sdk>=1.20.1",
]

[project.urls]
Documentation = "https://github.com/open-meteo/python-requests/tree/main#readme"
Repository = "https://github.com/open-meteo/python-requests"
"Issue Tracker" = "https://github.com/open-meteo/python-requests/issues"

[dependency-groups]
dev = [
    "pre-commit>=4.2.0",
]
lint = [
    "bandit>=1.8.5",
    "mypy>=1.16.1",
    "ruff>=0.12.1",
]
test = [
    "pytest>=8.4.1",
    "pytest-asyncio>=1.0.0",
    "pytest-cov>=6.2.1",
]

[tool.bandit]
exclude_dirs = ["build", "dist", "tests"]
number = 4
recursive = true
targets = "openmeteo_requests"

[tool.coverage.run]
source_dirs = ["openmeteo_requests"]
omit = ["tests"]
branch = true

[tool.coverage.report]
fail_under = 80

[tool.mypy]
python_version = "3.9"
files = ["openmeteo_requests"]
ignore_missing_imports = true
warn_return_any = true
warn_unused_configs = true

[tool.pytest.ini_options]
minversion = "8.4"
testpaths = ["tests"]
addopts = [
    "-xq",
    "--cov=openmeteo_requests",
    "--cov-report=xml:coverage.xml",
]
markers = [
    "integration: marks as integration test",
    "notebooks: marks as notebook test",
    "gpu: marks as gpu test",
    "spark: marks tests which need Spark",
    "slow: marks tests as slow",
    "unit: fast offline tests",
]
# pytest-asyncio
asyncio_mode = "auto"
asyncio_default_fixture_loop_scope = "function"
asyncio_default_test_loop_scope = "function"

[tool.ruff]
line-length = 80
indent-width = 4
target-version = "py39"

[tool.ruff.format]
quote-style = "double"
indent-style = "space"
skip-magic-trailing-comma = false
line-ending = "auto"
docstring-code-format = true
docstring-code-line-length = "dynamic"

[tool.ruff.lint]
select = [
    "A",  # flake8-builtins
    # "ANN",  # flake8-annotations
    "ARG",  # flake8-unused-arguments
    "ASYNC",  # flake8-async
    "B",  # falke8-bugbear
    "BLE",  # flake8-blind-except
    "C4",  # flake8-comprehensions
    "C90",  # mccabe
    # "D",  # pydocstyle
    "E",  # pycodestyle (Error)
    "EM",  # flake8-errmsg
    "ERA",  # eradicate - commented code
    "F",  #
    "FA",  # flake8-future-annotations
    "FBT",  # flake8-boolean-trap
    "I",  # isort
    "ICN",  # flake8-import-conventions
    "ISC",  # flake8-implicit-str-concat
    "N",  # pep8-naming
    "PIE",  # flake8-pie
    "PT",  # flake8-pytest-style
    "PYI",  # flake8-pyi
    "Q",  # flake8-quotes
    "RSE",  # flake8-raise
    "RET",  # flake8-return
    "S",  # flake8-bandit
    "SIM",  # flake8-simplify
    "SLF",  # flake8-self
    "SLOT",  # flake8-slots
    "T20",  # flake8-print
    "TC",  # flake8-type-checking
    "UP",  # pyupgrade
    "W",  # pycodestyle (Warning)
]
ignore = []

fixable = [
    "ALL",
    "I",  # isort
]

[tool.ruff.lint.per-file-ignores]
"tests/**/*.py" = [
    "E501",  # line-too-long
    "S101", # use-of-assert-detected
    "ERA",
    "C417",
]
